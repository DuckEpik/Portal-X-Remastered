-- Portal X Remastered

-- Instances:

local PortalXRemastered = Instance.new("ScreenGui")
local Page1 = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local UIGradient = Instance.new("UIGradient")
local TextLabel = Instance.new("TextLabel")
local Cmd = Instance.new("TextButton")
local Solaris = Instance.new("TextButton")
local Owl = Instance.new("TextButton")
local FunkyFriday = Instance.new("TextButton")
local PrisonLife = Instance.new("TextButton")
local Credits = Instance.new("TextButton")
local TextLabel_2 = Instance.new("TextLabel")
local Owl_2 = Instance.new("TextButton")
local Solaris_2 = Instance.new("TextButton")
local Credits_2 = Instance.new("Frame")
local UICorner_2 = Instance.new("UICorner")
local UIGradient_2 = Instance.new("UIGradient")
local TextLabel_3 = Instance.new("TextLabel")
local TextLabel_4 = Instance.new("TextLabel")
local TextLabel_5 = Instance.new("TextLabel")
local TextLabel_6 = Instance.new("TextLabel")
local TextLabel_7 = Instance.new("TextLabel")
local TextLabel_8 = Instance.new("TextLabel")

--Properties:

PortalXRemastered.Name = "Portal X Remastered"
PortalXRemastered.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

Page1.Name = "Page 1"
Page1.Parent = PortalXRemastered
Page1.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Page1.BorderColor3 = Color3.fromRGB(27, 42, 53)
Page1.BorderSizePixel = 0
Page1.Position = UDim2.new(0.0471246913, 0, 0.0549019687, 0)
Page1.Size = UDim2.new(0, 776, 0, 374)

UICorner.Parent = Page1

UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(48, 48, 48)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient.Parent = Page1

TextLabel.Parent = Page1
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.Size = UDim2.new(0, 302, 0, 43)
TextLabel.Font = Enum.Font.GothamBold
TextLabel.Text = "Portal X Remastered"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextSize = 25.000

Cmd.Name = "Cmd"
Cmd.Parent = Page1
Cmd.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Cmd.BackgroundTransparency = 1.000
Cmd.Position = UDim2.new(0.0272159111, 0, 0.218835413, 0)
Cmd.Size = UDim2.new(0, 141, 0, 50)
Cmd.Font = Enum.Font.SourceSans
Cmd.Text = "CMD X"
Cmd.TextColor3 = Color3.fromRGB(255, 255, 255)
Cmd.TextSize = 14.000
Cmd.MouseButton1Down:connect(function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/CMD-X/CMD-X/master/Source", true))()
end)

Solaris.Name = "Solaris"
Solaris.Parent = Page1
Solaris.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Solaris.BackgroundTransparency = 1.000
Solaris.Position = UDim2.new(0.208657697, 0, 0.218835413, 0)
Solaris.Size = UDim2.new(0, 141, 0, 50)
Solaris.Font = Enum.Font.SourceSans
Solaris.Text = "Solaris Hub"
Solaris.TextColor3 = Color3.fromRGB(255, 255, 255)
Solaris.TextSize = 14.000
Solaris.MouseButton1Down:connect(function()
	loadstring(game:HttpGet('https://solarishub.dev/script.lua',true))()
end)

Owl.Name = "Owl"
Owl.Parent = Page1
Owl.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Owl.BackgroundTransparency = 1.000
Owl.Position = UDim2.new(0.731477857, 0, 0.218835413, 0)
Owl.Size = UDim2.new(0, 141, 0, 50)
Owl.Font = Enum.Font.SourceSans
Owl.Text = "Owl Hub"
Owl.TextColor3 = Color3.fromRGB(255, 255, 255)
Owl.TextSize = 14.000
Owl.MouseButton1Down:connect(function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/CriShoux/OwlHub/master/OwlHub.txt"))();
end)


FunkyFriday.Name = "Funky Friday"
FunkyFriday.Parent = Page1
FunkyFriday.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
FunkyFriday.BackgroundTransparency = 1.000
FunkyFriday.Position = UDim2.new(0.389659882, 0, 0.218835413, 0)
FunkyFriday.Size = UDim2.new(0, 141, 0, 50)
FunkyFriday.Font = Enum.Font.SourceSans
FunkyFriday.Text = "Funky Friday"
FunkyFriday.TextColor3 = Color3.fromRGB(255, 255, 255)
FunkyFriday.TextSize = 14.000
FunkyFriday.MouseButton1Down:connect(function()
	local start = tick()
	local client = game:GetService('Players').LocalPlayer;
	local set_identity = (type(syn) == 'table' and syn.set_thread_identity) or setidentity or setthreadcontext

	local function fail(r) return client:Kick(r) end

	-- gracefully handle errors when loading external scripts
	-- added a cache to make hot reloading a bit faster

	local usedCache = shared.__urlcache and next(shared.__urlcache) ~= nil

	shared.__urlcache = shared.__urlcache or {}
	local function urlLoad(url)
		local success, result

		if shared.__urlcache[url] then
			success, result = true, shared.__urlcache[url]
		else
			success, result = pcall(game.HttpGet, game, url)
		end

		if (not success) then
			return fail(string.format('Failed to GET url %q for reason: %q', url, tostring(result)))
		end

		local fn, err = loadstring(result)
		if (type(fn) ~= 'function') then
			return fail(string.format('Failed to loadstring url %q for reason: %q', url, tostring(err)))
		end

		local results = { pcall(fn) }
		if (not results[1]) then
			return fail(string.format('Failed to initialize url %q for reason: %q', url, tostring(results[2])))
		end

		shared.__urlcache[url] = result
		return unpack(results, 2)
	end

	-- attempt to block imcompatible exploits
	-- rewrote because old checks literally did not work
	if type(set_identity) ~= 'function' then return fail('Unsupported exploit (missing "set_thread_identity")') end
	if type(getconnections) ~= 'function' then return fail('Unsupported exploit (missing "getconnections")') end
	if type(getloadedmodules) ~= 'function' then return fail('Unsupported exploit (misssing "getloadedmodules")') end
	if type(getgc) ~= 'function' then return fail('Unsupported exploit (misssing "getgc")') end

	local library = urlLoad("https://raw.githubusercontent.com/wally-rblx/uwuware-ui/main/main.lua")
	local akali     = urlLoad("https://gist.githubusercontent.com/wally-rblx/e010db020afe8259048a0c3c7262cdf8/raw/76ae0921ac9bd3215017e635d2c1037a37262240/notif.lua")

	local httpService = game:GetService('HttpService')

	local framework, scrollHandler
	local counter = 0

	while true do
		for _, obj in next, getgc(true) do
			if type(obj) == 'table' and rawget(obj, 'GameUI') then
				framework = obj;
				break
			end 
		end

		for _, module in next, getloadedmodules() do
			if module.Name == 'ScrollHandler' then
				scrollHandler = module;
				break;
			end
		end

		if (type(framework) == 'table') and (typeof(scrollHandler) == 'Instance') then
			break
		end

		counter = counter + 1
		if counter > 6 then
			fail(string.format('Failed to load game dependencies. Details: %s, %s', type(framework), typeof(scrollHandler)))
		end
		wait(1)
	end

	local runService = game:GetService('RunService')
	local userInputService = game:GetService('UserInputService')
	local virtualInputManager = game:GetService('VirtualInputManager')

	local random = Random.new()

	local task = task or getrenv().task;
	local fastWait, fastSpawn = task.wait, task.spawn;

	-- firesignal implementation
	-- hitchance rolling
	local fireSignal, rollChance do
		-- updated for script-ware or whatever
		-- attempted to update for krnl

		function fireSignal(target, signal, ...)
			-- getconnections with InputBegan / InputEnded does not work without setting Synapse to the game's context level
			set_identity(2)
			local didFire = false
			for _, signal in next, getconnections(signal) do
				if type(signal.Function) == 'function' and islclosure(signal.Function) then
					local scr = rawget(getfenv(signal.Function), 'script')
					if scr == target then
						didFire = true
						pcall(signal.Function, ...)
					end
				end
			end
			-- if not didFire then fail"couldnt fire input signal" end
			set_identity(7)
		end

		-- uses a weighted random system
		-- its a bit scuffed rn but it works good enough

		function rollChance()
			if (library.flags.autoPlayerMode == 'Manual') then
				if (library.flags.sickHeld) then return 'Sick' end
				if (library.flags.goodHeld) then return 'Good' end
				if (library.flags.okayHeld) then return 'Ok' end
				if (library.flags.missHeld) then return 'Bad' end

				return 'Bad' -- incase if it cant find one
			end

			local chances = {
				{ type = 'Sick', value = library.flags.sickChance },
				{ type = 'Good', value = library.flags.goodChance },
				{ type = 'Ok', value = library.flags.okChance },
				{ type = 'Bad', value = library.flags.badChance },
				{ type = 'Miss' , value = library.flags.missChance },
			}

			table.sort(chances, function(a, b)
				return a.value > b.value
			end)

			local sum = 0;
			for i = 1, #chances do
				sum += chances[i].value
			end

			if sum == 0 then
				-- forgot to change this before?
				-- fixed 6/5/21

				return chances[random:NextInteger(1, #chances)].type
			end

			local initialWeight = random:NextInteger(0, sum)
			local weight = 0;

			for i = 1, #chances do
				weight = weight + chances[i].value

				if weight > initialWeight then
					return chances[i].type
				end
			end

			return 'Sick' -- just incase it fails?
		end
	end


	local function notify(text, duration)
		return akali.Notify({
			Title = 'Funky friday autoplayer', 
			Description = text,
			Duration = duration or 1,
		})
	end

	library.notify = notify

	-- save manager
	local saveManager = {} do
		local defaultSettings = [[{"Funky Friday":{"goodChance":{"value":0,"type":"slider"},"badChance":{"value":0,"type":"slider"},"okChance":{"value":0,"type":"slider"},"autoPlayer":{"state":false,"type":"toggle"},"goodBind":{"key":"Two","type":"bind"},"sickChance":{"value":100,"type":"slider"},"okBind":{"key":"Three","type":"bind"},"sickBind":{"key":"One","type":"bind"},"Menu toggle":{"key":"Delete","type":"bind"},"secondaryPressMode":{"state":false,"type":"toggle"},"autoDelay":{"value":50,"type":"slider"},"autoPlayerToggle":{"key":"End","type":"bind"},"badBind":{"key":"Four","type":"bind"},"autoPlayerMode":{"value":"Chances","type":"list"},"missChance":{"value":0,"type":"slider"}}}]]
		local optionTypes = {
			toggle = {
				Save = function(option)
					return { type = 'toggle', state = option.state }
				end,
				Load = function(option, data)
					option:SetState(data.state)
				end
			},
			bind = {
				Save = function(option)
					return { type = 'bind', key = option.key }
				end,
				Load = function(option, data)
					option:SetKey(data.key)
				end
			},
			slider = {
				Save = function(option)
					return { type = 'slider', value = option.value }
				end,
				Load = function(option, data)
					option:SetValue(data.value)
				end,
			},
			color = {
				Save = function(option)
					return { type = 'color', color = option.color:ToHex() }
				end,
				Load = function(option, data)
					option:SetValue(Color3.fromHex(data.color))
				end
			},
			list = {
				Save = function(option)
					return { type = 'list', value = option.value }
				end,
				Load = function(option, data)
					option:SetValue(data.value)
				end
			},
		}

		local function recurseLibraryOptions(root, callback)
			for _, option in next, root do
				if option.type == 'folder' then
					recurseLibraryOptions(option.options, callback)
				else
					callback(option)
				end
			end
		end

		function saveManager:SaveConfig(name)
			local data = {}

			for _, window in next, library.windows do
				if window.title == 'Configs' then continue end

				local storage = {}
				data[window.title] = storage

				recurseLibraryOptions(window.options, function(option)
					local parser = optionTypes[option.type]
					if parser then
						storage[option.flag] = parser.Save(option)
					end
				end)
			end

			local s, err = pcall(writefile, 'funky_friday_autoplayer\\configs\\' .. name, httpService:JSONEncode(data))
			if not s then
				library.notify(string.format('Failed to save config %q because %q', name, err), 2)
				if err == 'invalid extension' then
					library.notify('Try adding a file extension after your config name. ex: ".json", ".txt", ".dat"', 2)
				end
				return
			end

			library.refreshConfigs()
		end

		function saveManager:LoadConfig(name)
			local data
			if name == 'default' then
				data = defaultSettings
			else
				data = readfile('funky_friday_autoplayer\\configs\\' .. name)
			end

			local success, data = pcall(function() return httpService:JSONDecode(data) end)
			if not success then 
				return library.notify(string.format('Failed to load config %q because %q', name, data))
			end

			for _, window in next, library.windows do
				if window.title == 'Configs' then continue end

				local storage = data[window.title]
				if not storage then continue end

				recurseLibraryOptions(window.options, function(option)
					local parser = optionTypes[option.type]
					if parser then
						parser.Load(option, storage[option.flag])
					end
				end)
			end
		end

	end

	-- autoplayer
	local chanceValues do
		chanceValues = { 
			Sick = 96,
			Good = 92,
			Ok = 87,
			Bad = 75,
		}

		local keyCodeMap = {}
		for _, enum in next, Enum.KeyCode:GetEnumItems() do
			keyCodeMap[enum.Value] = enum
		end

		if shared._unload then
			pcall(shared._unload)
		end

		library.callbacks = {}

		library.threads = {}
		function shared._unload()
			if shared._id then
				pcall(runService.UnbindFromRenderStep, runService, shared._id)
			end

			if library.open then
				library:Close()
			end

			library.base:ClearAllChildren()
			library.base:Destroy()

			for i = 1, #library.threads do
				coroutine.close(library.threads[i])
			end

			for i = 1, #library.callbacks do
				task.spawn(library.callbacks[i])
			end
		end

		shared._id = httpService:GenerateGUID(false)

		local rng = Random.new()
		runService:BindToRenderStep(shared._id, 1, function()
			if (not library.flags.autoPlayer) then return end
			if typeof(framework.SongPlayer.CurrentlyPlaying) ~= 'Instance' then return end
			if framework.SongPlayer.CurrentlyPlaying.ClassName ~= 'Sound' then return end

			local arrows = {}
			for _, obj in next, framework.UI.ActiveSections do
				arrows[#arrows + 1] = obj;
			end

			local count = framework.SongPlayer:GetKeyCount()
			local mode = count .. 'Key'

			local arrowData = framework.ArrowData[mode].Arrows

			for idx = 1, #arrows do
				local arrow = arrows[idx]
				if type(arrow) ~= 'table' then
					continue
				end

				local ignoredNoteTypes = { Death = true, ['Pea Note'] = true }

				if type(arrow.NoteDataConfigs) == 'table' then 
					if ignoredNoteTypes[arrow.NoteDataConfigs.Type] then 
						continue
					end
				end

				if (arrow.Side == framework.UI.CurrentSide) and (not arrow.Marked) and framework.SongPlayer.CurrentlyPlaying.TimePosition > 0 then
					local position = (arrow.Data.Position % count) .. '' 

					local hitboxOffset = 0 do
						local settings = framework.Settings;
						local offset = type(settings) == 'table' and settings.HitboxOffset;
						local value = type(offset) == 'table' and offset.Value;

						if type(value) == 'number' then
							hitboxOffset = value;
						end

						hitboxOffset = hitboxOffset / 1000
					end

					local songTime = framework.SongPlayer.CurrentTime do
						local configs = framework.SongPlayer.CurrentSongConfigs
						local playbackSpeed = type(configs) == 'table' and configs.PlaybackSpeed

						if type(playbackSpeed) ~= 'number' then
							playbackSpeed = 1
						end

						songTime = songTime /  playbackSpeed
					end

					local noteTime = math.clamp((1 - math.abs(arrow.Data.Time - (songTime + hitboxOffset))) * 100, 0, 100)

					local result = rollChance()
					arrow._hitChance = arrow._hitChance or result;

					local hitChance = (library.flags.autoPlayerMode == 'Manual' and result or arrow._hitChance)
					if hitChance ~= "Miss" and noteTime >= chanceValues[arrow._hitChance] then
						fastSpawn(function()
							arrow.Marked = true;
							local keyCode = keyCodeMap[arrowData[position].Keybinds.Keyboard[1]]

							if library.flags.secondaryPressMode then
								virtualInputManager:SendKeyEvent(true, keyCode, false, nil)
							else
								fireSignal(scrollHandler, userInputService.InputBegan, { KeyCode = keyCode, UserInputType = Enum.UserInputType.Keyboard }, false)
							end

							if arrow.Data.Length > 0 then
								if library.flags.delayMode == 'Random' then
									fastWait(arrow.Data.Length + rng:NextNumber(library.flags.heldNoteDelayMin, library.flags.heldNoteDelayMax) / 1000)
								else
									fastWait(arrow.Data.Length + (library.flags.heldDelay / 1000))
								end
							else
								if library.flags.delayMode == 'Random' then
									fastWait(rng:NextNumber(library.flags.noteDelayMin, library.flags.noteDelayMax) / 1000)
								else
									fastWait(library.flags.autoDelay / 1000)
								end
							end

							if library.flags.secondaryPressMode then
								virtualInputManager:SendKeyEvent(false, keyCode, false, nil)
							else
								fireSignal(scrollHandler, userInputService.InputEnded, { KeyCode = keyCode, UserInputType = Enum.UserInputType.Keyboard }, false)
							end

							arrow.Marked = nil;
						end)
					end
				end
			end
		end)
	end

	-- menu 

	local windows = {
		autoplayer = library:CreateWindow('Autoplayer'),
		customization = library:CreateWindow('Customization'),
		configs = library:CreateWindow('Configs'),
		misc = library:CreateWindow('Miscellaneous')
	}

	local folder = windows.autoplayer:AddFolder('Main') do
		local toggle = folder:AddToggle({ text = 'Autoplayer', flag = 'autoPlayer' })

		folder:AddToggle({ text = 'Secondary press mode', flag = 'secondaryPressMode', callback = function()
			if library.flags.secondaryPressMode then 
				library.notify('Only enable "Secondary press mode" if the main autoplayer does not work! It may cause issues or not be as accurate!')
			end
		end }) -- alternate mode if something breaks on krml or whatever
		folder:AddLabel({ text = "Enable if autoplayer breaks" })

		-- Fixed to use toggle:SetState
		folder:AddBind({ text = 'Autoplayer toggle', flag = 'autoPlayerToggle', key = Enum.KeyCode.End, callback = function()
			toggle:SetState(not toggle.state)
		end })

		folder:AddDivider()
		folder:AddList({ text = 'Autoplayer mode', flag = 'autoPlayerMode', values = { 'Chances', 'Manual'  } })
	end

	local folder = windows.customization:AddFolder('Hit chances') do
		folder:AddSlider({ text = 'Sick %', flag = 'sickChance', min = 0, max = 100, value = 100 })
		folder:AddSlider({ text = 'Good %', flag = 'goodChance', min = 0, max = 100, value = 0 })
		folder:AddSlider({ text = 'Ok %', flag = 'okChance', min = 0, max = 100, value = 0 })
		folder:AddSlider({ text = 'Bad %', flag = 'badChance', min = 0, max = 100, value = 0 })
		folder:AddSlider({ text = 'Miss %', flag = 'missChance', min = 0, max = 100, value = 0 })
	end

	local folder = windows.customization:AddFolder('Timing') do
		folder:AddSlider({ text = 'Release delay (ms)', flag = 'autoDelay', min = 0, max = 500, value = 20 })
		folder:AddSlider({ text = 'Held delay (ms)', flag = 'heldDelay', min = -20, max = 100, value = -20 })
	end

	local folder = windows.customization:AddFolder('Random timing') do
		folder:AddList({ text = 'Delay mode', flag = 'delayMode', values = { 'Manual', 'Random' }})
		folder:AddDivider()
		folder:AddLabel({ text = 'Note delay' })
		folder:AddSlider({ flag = 'noteDelayMin', text = 'Minimum (ms)', min = 0, max = 200 })
		folder:AddSlider({ flag = 'noteDelayMax', text = 'Maximum (ms)', min = 0, max = 200, value = 20 })
		folder:AddDivider()
		folder:AddLabel({ text = 'Held note delay' })
		folder:AddSlider({ flag = 'heldNoteDelayMin', text = 'Minimum (ms)', min = 0, max = 200 })
		folder:AddSlider({ flag = 'heldNoteDelayMax', text = 'Maximum (ms)', min = 0, max = 200, value = 20 })
	end

	local folder = windows.customization:AddFolder('Unlockables') do
		-- Note: I know you can do this with UserId but it only works if you run it before opening the notes menu
		-- My script should work no matter the order of which you run things :)
		local loadStyle = nil
		local function loadStyleProxy(...)
			-- This forces the styles to reload every time
			local unknown = getupvalue(loadStyle, 1)
			unknown.Style = nil
			setupvalue(loadStyle, 1, unknown)

			return loadStyle(...)
		end

		local gc = getgc()
		for i = 1, #gc do
			local obj = gc[i]
			if type(obj) == 'function' then
				local nups = getinfo(obj).nups;
				for i = 1, nups do
					local upv = getupvalue(obj, i)
					if type(upv) == 'function' and getinfo(upv).name == 'LoadStyle' then
						loadStyle = loadStyle or upv
						setupvalue(obj, i, loadStyleProxy)

						table.insert(library.callbacks, function()
							pcall(setupvalue, obj, i, loadStyle)
						end)
					end
				end
			end
		end

		folder:AddButton({ text = 'Unlock developer arrows', callback = function(state)
			local idx = table.find(framework.SongsWhitelist, client.UserId)
			if idx then return end

			notify('Developer arrows have been unlocked!', 3)
			table.insert(framework.SongsWhitelist, client.UserId)
		end })
	end

	local folder = windows.customization:AddFolder('Keybinds') do
		folder:AddBind({ text = 'Sick', flag = 'sickBind', key = Enum.KeyCode.One, hold = true, callback = function(val) library.flags.sickHeld = (not val) end, })
		folder:AddBind({ text = 'Good', flag = 'goodBind', key = Enum.KeyCode.Two, hold = true, callback = function(val) library.flags.goodHeld = (not val) end, })
		folder:AddBind({ text = 'Ok', flag = 'okBind', key = Enum.KeyCode.Three, hold = true, callback = function(val) library.flags.okayHeld = (not val) end, })
		folder:AddBind({ text = 'Bad', flag = 'badBind', key = Enum.KeyCode.Four, hold = true, callback = function(val) library.flags.missHeld = (not val) end, })
	end

	if type(readfile) == 'function' and type(writefile) == 'function' and type(makefolder) == 'function' and type(isfolder) == 'function' then
		if not isfolder('funky_friday_autoplayer\\configs') then
			makefolder('funky_friday_autoplayer')
			makefolder('funky_friday_autoplayer\\configs')
		end

		local window = windows.configs do
			window:AddBox({ text = 'Config name', value = '', flag = 'configNameInput' })
			library._configList = window:AddList({ text = 'Config list', values = { 'default' }, flag = 'configList' })

			window:AddButton({ text = 'Save config', callback = function()
				local name = library.flags.configNameInput
				if name:gsub(' ', '') == '' then
					return notify('Failed to save. [invalid config name]', 3)
				end

				saveManager:SaveConfig(name)
			end })

			window:AddButton({ text = 'Load config', callback = function()
				local name = library.flags.configList

				if name:gsub(' ', '') == '' then
					return notify('Failed to load. [invalid config name]', 3)
				end

				if not isfile('funky_friday_autoplayer\\configs\\' .. name) then
					return notify('Failed to load. [config does not exist]', 3)
				end

				saveManager:LoadConfig(name)
			end })

			window:AddDivider()

			function library.refreshConfigs()
				for _, value in next, library._configList.values do
					if value == 'default' then continue end
					library._configList:RemoveValue(tostring(value))
				end

				local files = listfiles('funky_friday_autoplayer\\configs')
				for i = 1, #files do
					files[i] = files[i]:gsub('funky_friday_autoplayer\\configs\\', '')
					library._configList:AddValue(files[i])
				end

				if files[1] then
					library._configList:SetValue(files[1])
				else
					library._configList:SetValue('default')
				end
			end

			window:AddButton({ text = 'Refresh configs', callback = library.refreshConfigs })
		end
		task.delay(1, library.refreshConfigs)
	else
		notify('Failed to create configs window due to your exploit missing certain file functions.', 2)
	end


	windows.misc:AddLabel({ text = 'Credits:' })
	windows.misc:AddDivider()
	windows.misc:AddLabel({ text = 'Jan - UI library' })
	windows.misc:AddLabel({ text = 'wally - Script' })
	windows.misc:AddLabel({ text = 'Sezei - Contributor'})
	windows.misc:AddLabel({ text = 'aKinlei - Notifications'})
	windows.misc:AddDivider()

	windows.misc:AddLabel({ text = 'Version 1.9c' })
	windows.misc:AddLabel({ text = 'Updated 3/20/22' })
	windows.misc:AddLabel({ text = 'Thank you for using this script!' })

	windows.misc:AddDivider()
	windows.misc:AddButton({ text = 'Unload script', callback = function()
		shared._unload()
		library.notify('Successfully unloaded script!', 2)
	end })

	windows.misc:AddButton({ text = 'Copy discord', callback = function()
		if pcall(setclipboard, "https://wally.cool/discord") then
			library.notify('Successfully copied discord', 2)
		end
	end })

	windows.misc:AddDivider()
	windows.misc:AddBind({ text = 'Menu toggle', key = Enum.KeyCode.Delete, callback = function() library:Close() end })

	library:Init()
	library.notify(string.format('Loaded script in %.4f second(s)!\nUsed Http cache: %s', tick() - start, tostring(usedCache)), 3)
end)

PrisonLife.Name = "Prison Life"
PrisonLife.Parent = Page1
PrisonLife.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
PrisonLife.BackgroundTransparency = 1.000
PrisonLife.Position = UDim2.new(0.550419271, 0, 0.218835413, 0)
PrisonLife.Size = UDim2.new(0, 141, 0, 50)
PrisonLife.Font = Enum.Font.SourceSans
PrisonLife.Text = "Prison Life"
PrisonLife.TextColor3 = Color3.fromRGB(255, 255, 255)
PrisonLife.TextSize = 14.000


Credits.Name = "Credits"
Credits.Parent = Page1
Credits.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Credits.Position = UDim2.new(0.804018497, 0, 0.83915627, 0)
Credits.Size = UDim2.new(0, 141, 0, 50)
Credits.Font = Enum.Font.SourceSans
Credits.Text = "Credits"
Credits.TextColor3 = Color3.fromRGB(255, 255, 255)
Credits.TextSize = 14.000

TextLabel_2.Parent = Page1
TextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_2.BackgroundTransparency = 1.000
TextLabel_2.Position = UDim2.new(0.12757732, 0, 0.138621509, 0)
TextLabel_2.Size = UDim2.new(0, 243, 0, 0)
TextLabel_2.Font = Enum.Font.GothamBold
TextLabel_2.Text = "A roblox script hub by Neolix And Duck e"
TextLabel_2.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_2.TextSize = 22.000

Owl_2.Name = "Owl"
Owl_2.Parent = Page1
Owl_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Owl_2.BackgroundTransparency = 1.000
Owl_2.Position = UDim2.new(0.0265809298, 0, 0.352525234, 0)
Owl_2.Size = UDim2.new(0, 141, 0, 50)
Owl_2.Font = Enum.Font.SourceSans
Owl_2.Text = "Duck Hub made by duck e (me)"
Owl_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Owl_2.TextSize = 14.000
PrisonLife.MouseButton1Down:connect(function()
	loadstring(game:HttpGet(('https://raw.githubusercontent.com/DuckEpik/DuckHub/main/Script'),true))()
end)


Solaris_2.Name = "Solaris"
Solaris_2.Parent = Page1
Solaris_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Solaris_2.BackgroundTransparency = 1.000
Solaris_2.Position = UDim2.new(0.208657697, 0, 0.349851459, 0)
Solaris_2.Size = UDim2.new(0, 141, 0, 50)
Solaris_2.Font = Enum.Font.SourceSans
Solaris_2.Text = "Domain X"
Solaris_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Solaris_2.TextSize = 14.000
PrisonLife.MouseButton1Down:connect(function()
	loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/DomainX/main/source',true))()
end)


Credits_2.Name = "Credits"
Credits_2.Parent = PortalXRemastered
Credits_2.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Credits_2.BorderColor3 = Color3.fromRGB(27, 42, 53)
Credits_2.BorderSizePixel = 0
Credits_2.Position = UDim2.new(0.357994258, 0, 0.520261467, 0)
Credits_2.Size = UDim2.new(0, 776, 0, 374)
Credits_2.Visible = false

UICorner_2.Parent = Credits_2

UIGradient_2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(48, 48, 48)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_2.Parent = Credits_2

TextLabel_3.Parent = Credits_2
TextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_3.BackgroundTransparency = 1.000
TextLabel_3.Position = UDim2.new(0.0115979379, 0, 0, 0)
TextLabel_3.Size = UDim2.new(0, 328, 0, 59)
TextLabel_3.Font = Enum.Font.GothamBold
TextLabel_3.Text = "Portal X Remastered Credits"
TextLabel_3.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_3.TextSize = 25.000

TextLabel_4.Parent = Credits_2
TextLabel_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_4.BackgroundTransparency = 1.000
TextLabel_4.Position = UDim2.new(0.104381442, 0, 0.235294104, 0)
TextLabel_4.Size = UDim2.new(0, 328, 0, 25)
TextLabel_4.Font = Enum.Font.GothamBold
TextLabel_4.Text = " Founder/Main Gui Maker/Dev: Duck e#8184"
TextLabel_4.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_4.TextSize = 25.000

TextLabel_5.Parent = Credits_2
TextLabel_5.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_5.BackgroundTransparency = 1.000
TextLabel_5.Position = UDim2.new(0, 0, 0.302139014, 0)
TextLabel_5.Size = UDim2.new(0, 328, 0, 25)
TextLabel_5.Font = Enum.Font.GothamBold
TextLabel_5.Text = "NeoLix#0985"
TextLabel_5.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_5.TextSize = 25.000

TextLabel_6.Parent = Credits_2
TextLabel_6.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_6.BackgroundTransparency = 1.000
TextLabel_6.Position = UDim2.new(0, 0, 0.368983924, 0)
TextLabel_6.Size = UDim2.new(0, 328, 0, 25)
TextLabel_6.Font = Enum.Font.GothamBold
TextLabel_6.Text = "Solaris Hub: ???"
TextLabel_6.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_6.TextSize = 25.000

TextLabel_7.Parent = Credits_2
TextLabel_7.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_7.BackgroundTransparency = 1.000
TextLabel_7.Position = UDim2.new(0.074742265, 0, 0.435828835, 0)
TextLabel_7.Size = UDim2.new(0, 328, 0, 25)
TextLabel_7.Font = Enum.Font.GothamBold
TextLabel_7.Text = "Owl Hub: CriShoux And Google Chrome"
TextLabel_7.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_7.TextSize = 25.000

TextLabel_8.Parent = Credits_2
TextLabel_8.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_8.BackgroundTransparency = 1.000
TextLabel_8.Position = UDim2.new(0.143041223, 0, 0.502673745, 0)
TextLabel_8.Size = UDim2.new(0, 328, 0, 25)
TextLabel_8.Font = Enum.Font.GothamBold
TextLabel_8.Text = "Cmd X: pigeon#8951 |  fini#7057 | Curvn#2002"
TextLabel_8.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_8.TextSize = 25.000

-- Scripts:

local function ZLBJDPH_fake_script() -- Page1.Dragable 
	local script = Instance.new('LocalScript', Page1)

	script.Parent.Active = true
	script.Parent.Draggable = true
end
coroutine.wrap(ZLBJDPH_fake_script)()
local function YBSRHP_fake_script() -- Credits.Open/Close (PUT ME IN A TEXTBUTTON) 
	local script = Instance.new('LocalScript', Credits)

	script.Parent.MouseButton1Click:connect(function()
	 script.Parent.Parent.Parent.Credits.Visible = not script.Parent.Parent.Parent.Credits.Visible
	end)
	
	--                                                               ^
	--]]	Change "Credit" to the name of the frame                 ^                      
end
coroutine.wrap(YBSRHP_fake_script)()
local function ENEF_fake_script() -- nil.Instructions 
	local script = Instance.new('Script', nil)

	---Hello! Thank you for using this script originally by Roman On Fire on YouTube!
	
	--First of all- I'm dumb. I'm taking no credit for this. All credit goes to Roman On Fire.
	
	--SO!
	
	
	----- ~Instructions~ -----
	
	-- 1. Make a TextButton 
	-- 2. Make a Frame, and rename it Credit (if you don't want to touch the script)
	--	 or rename it whatever (Menu, Rules) and then in the script you'll see what to do.
	--3. Customize yer stuff, and make the frame invisible by unchecking "Visible."
	
	----- ~Done~ -----
	
	--And again, thank you. You may want to delete this after.
	
	--- ~~Published by LAClout ~~ ---
	
	--I don't know if this was already published by anyone else, but I'm sorry if this was.
	
	--P.S. Publishing this as your own is like saying "I suck at this stuff, so I'mma be a 
	--	wannabe and say "I made this"
end
coroutine.wrap(ENEF_fake_script)()
local function MLSYBN_fake_script() -- PortalXRemastered.KeyPress 
	local script = Instance.new('LocalScript', PortalXRemastered)

	--[[
		
		Press Key to Open a GUI Script V2
		Script By: Theevilem
		
		This script works so that when you press a key on your keyboard, it opens a Gui.
		
		Put it accordingly into the StarterGui (More info on line 17
		
	--]]
	wait()
	
	local Players = game:GetService("Players")
	local Player = Players.LocalPlayer
	
	local Mouse = Player:GetMouse()
	local Gui = script.Parent -- Set path to whatever Gui you want to open. For Example: script.Parent.Parent.GuiOrFrameName
	local Open = false
	
	function PressP(key) -- Chnage Q to whatever key you desire. Capitals matter. For Example: PressH
		if (key == "p") then -- Change "q" to whatever letter you use in the line above. Lowercase matters. For Example: "h"
			if (Open == false) then
				Gui.Visible = true
				Open = true
			elseif (Open == true) then
				Gui.Visible = false
				Open = false
			end
		end
	end
		
	Mouse.KeyDown:Connect(PressP) -- Make sure (PressQ) matches what you have for line 20. For Example: (PressH)
end
coroutine.wrap(MLSYBN_fake_script)()
local function YQEWK_fake_script() -- Credits_2.Dragable 
	local script = Instance.new('LocalScript', Credits_2)

	script.Parent.Active = true
	script.Parent.Draggable = true
end
coroutine.wrap(YQEWK_fake_script)()
